PROBLEM

Similarly to GET /api/accounts, we need GET /api/transactions.

Create GET /transactions route that sends back the transactions in JSON (from database!).

The example of the server and a route is this (you'll need to add the DB connect and the route logic):

var express = require('express'),
  app = express(),
  mongo = require('mongodb')

  // TODO: DB connection
  app.get('/api/transactions', function(req, res, next){
    // TODO: use DB collection to find transactions, send then back in JSON
  })

  app.listen(3000)


The MongoDB connection is established with this command:

var url = 'mongodb://localhost:27017/mean';
mongo.connect(url, function(err, db) {
  if (err) {
    console.error(err)
    return process.exit(1)
  }
  transactionsCollection  = db.collection('transactions')

})

You can download tests for the server from https://github.kdc.capitalone.com/secollege/mean/blob/master/code/test.js.
To run only GET /transactions, add `it.only` to `it`: https://github.kdc.capitalone.com/secollege/mean/blob/master/code/test.js

To run test install mocha with $ npm install mocha --save and run the test with: $ ./node_modules/mocha/bin/mocha test.js or npm test if you put this script into package.json.

Run `$ $ADVENTURE_COMMAND verify` when you are ready to check the installation and version of MongoDB.


BONUS:

Use the following middleware in your Express app (install, include and apply):

body-parser: body parsing (URL-encodeded and JSON)
errorhandler: development error handling
cors: CORS headers
morgan: logging

---

HINTS

The database must be running in its own window/tab or in detached mode.

To start the DB, run `$ mongod`.

The syntax for the MongoDB find is this:

transactionsCollection.find({}, {sort: {_id:-1}}).toArray(function(error, transactions){
  if (error) return next(error)
  console.log(transactions)
})

---

Run `$ $ADVENTURE_COMMAND verify` once that is done.

Some helpful commands:

`$ $ADVENTURE_COMMAND help` to get help with the workshop
`$ $ADVENTURE_COMMAND print` to re-display the current exercise
`$ $ADVENTURE_COMMAND verify YOUR_FILE_NAME` to verify that you have finished an exercise
`$ $ADVENTURE_COMMAND solution` to show the solution for the current exercise

`$ $ADVENTURE_COMMAND verify skip` to skip it.
